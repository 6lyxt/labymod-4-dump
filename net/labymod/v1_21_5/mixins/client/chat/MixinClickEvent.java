// 
// Decompiled by Procyon v0.6.0
// 

package net.labymod.v1_21_5.mixins.client.chat;

import java.lang.invoke.CallSite;
import java.lang.reflect.UndeclaredThrowableException;
import java.lang.invoke.MethodHandle;
import java.lang.runtime.SwitchBootstraps;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandles;
import org.spongepowered.asm.mixin.Intrinsic;
import java.net.URI;
import java.util.Objects;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Interface;
import org.spongepowered.asm.mixin.Implements;
import org.spongepowered.asm.mixin.Mixin;
import net.labymod.api.client.component.event.ClickEvent;

@Mixin({ xe.class })
@Implements({ @Interface(iface = ClickEvent.class, prefix = "clickEvent$", remap = Interface.Remap.NONE) })
public interface MixinClickEvent extends ClickEvent
{
    @Shadow
    xe.a shadow$a();
    
    default Action action() {
        return switch (this.shadow$a()) {
            default -> throw new MatchException(null, null);
            case a -> Action.OPEN_URL;
            case b -> Action.OPEN_FILE;
            case c -> Action.RUN_COMMAND;
            case d -> Action.SUGGEST_COMMAND;
            case e -> Action.CHANGE_PAGE;
            case f -> Action.COPY_TO_CLIPBOARD;
        };
    }
    
    @Intrinsic
    default String clickEvent$getValue() {
        final xe obj;
        final xe clickEvent = obj = (xe)this;
        Objects.requireNonNull(obj);
        final xe xe = obj;
    Label_0176_Outer:
        while (true) {
        Label_0085_Outer:
            while (true) {
            Label_0107_Outer:
                while (true) {
                Label_0198_Outer:
                    while (true) {
                    Label_0129_Outer:
                        while (true) {
                            while (true) {
                                switch (/* invokedynamic(!) */ProcyonInvokeDynamicHelper_3.invoke(xe, false)) {
                                    case 0: {
                                        final xe.b b = (xe.b)xe;
                                        try {
                                            final int page = b.b();
                                            return String.valueOf(page);
                                            final String command = s = ((xe.f)xe).b();
                                            return s;
                                            final String command2 = s = ((xe.g)xe).b();
                                            return s;
                                            final String value = s = ((xe.c)xe).b();
                                            return s;
                                            final String path = s = ((xe.d)xe).c();
                                            return s;
                                            throw new IllegalStateException("Unexpected value: " + String.valueOf(clickEvent));
                                            final URI uri = ((xe.e)xe).b();
                                            s = uri.toString();
                                            return s;
                                        }
                                        catch (final Throwable cause) {
                                            throw new MatchException(cause.toString(), cause);
                                        }
                                        break;
                                    }
                                    case 1: {
                                        continue Label_0107_Outer;
                                    }
                                    case 2: {
                                        continue Label_0198_Outer;
                                    }
                                    case 3: {
                                        continue;
                                    }
                                    case 4: {
                                        continue Label_0176_Outer;
                                    }
                                    case 5: {
                                        continue Label_0085_Outer;
                                    }
                                    default: {
                                        continue Label_0129_Outer;
                                    }
                                }
                                break;
                            }
                            break;
                        }
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        }
    }
    
    // This helper class was generated by Procyon to approximate the behavior of an
    // 'invokedynamic' instruction that it doesn't know how to interpret.
    private static final class ProcyonInvokeDynamicHelper_3
    {
        private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
        private static MethodHandle handle;
        private static volatile int fence;
        
        private static MethodHandle handle() {
            final MethodHandle handle = ProcyonInvokeDynamicHelper_3.handle;
            if (handle != null)
                return handle;
            return ProcyonInvokeDynamicHelper_3.ensureHandle();
        }
        
        private static MethodHandle ensureHandle() {
            ProcyonInvokeDynamicHelper_3.fence = 0;
            MethodHandle handle = ProcyonInvokeDynamicHelper_3.handle;
            if (handle == null) {
                MethodHandles.Lookup lookup = ProcyonInvokeDynamicHelper_3.LOOKUP;
                try {
                    handle = ((CallSite)SwitchBootstraps.typeSwitch(lookup, "typeSwitch", MethodType.methodType(int.class, Object.class, int.class), xe.b.class, xe.c.class, xe.d.class, xe.e.class, xe.f.class, xe.g.class)).dynamicInvoker();
                }
                catch (Throwable t) {
                    throw new UndeclaredThrowableException(t);
                }
                ProcyonInvokeDynamicHelper_3.fence = 1;
                ProcyonInvokeDynamicHelper_3.handle = handle;
                ProcyonInvokeDynamicHelper_3.fence = 0;
            }
            return handle;
        }
        
        private static int invoke(Object p0, int p1) {
            try {
                return ProcyonInvokeDynamicHelper_3.handle().invokeExact(p0, p1);
            }
            catch (Throwable t) {
                throw new UndeclaredThrowableException(t);
            }
        }
    }
}
