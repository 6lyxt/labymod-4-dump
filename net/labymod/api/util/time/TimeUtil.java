// 
// Decompiled by Procyon v0.6.0
// 

package net.labymod.api.util.time;

import java.lang.invoke.CallSite;
import java.lang.reflect.UndeclaredThrowableException;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.StringConcatFactory;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandles;
import net.labymod.api.util.ide.IgnoreInstrumentation;

@IgnoreInstrumentation
public final class TimeUtil
{
    public static final float TICKS_TO_MILLISECONDS = 50.0f;
    public static final float MILLISECONDS_TO_TICKS = 0.02f;
    public static NanosecondsTimeSource nanosecondsTimeSource;
    
    private TimeUtil() {
    }
    
    public static float convertDeltaToMilliseconds(final float ticks) {
        return convertTicksToMilliseconds(Math.min(1.0f, ticks));
    }
    
    public static float convertTicksToMilliseconds(final float ticks) {
        return ticks * 50.0f;
    }
    
    public static float convertMillisecondsToTicks(final long milliseconds) {
        return milliseconds * 0.02f;
    }
    
    public static long getMillis() {
        return getNanos() / 1000000L;
    }
    
    public static long getNanos() {
        return TimeUtil.nanosecondsTimeSource.getAsLong();
    }
    
    @Deprecated(forRemoval = true, since = "4.1.23")
    public static long getCurrentTimeMills() {
        return getCurrentTimeMillis();
    }
    
    public static long getCurrentTimeMillis() {
        return System.currentTimeMillis();
    }
    
    public static long getNanoTime() {
        return System.nanoTime();
    }
    
    public static String formatTickDuration(final int duration) {
        int seconds = duration / 20;
        int minutes = seconds / 60;
        seconds %= 60;
        final int hours = minutes / 60;
        minutes %= 60;
        return (hours > 0) ? (hours + ":" + formatMinutesAndSeconds(minutes, seconds)) : formatMinutesAndSeconds(minutes, seconds);
    }
    
    private static String formatMinutesAndSeconds(final int minutes, final int seconds) {
        return String.valueOf((minutes < 10) ? ("0" + minutes) : Integer.valueOf(minutes)) + ":" + String.valueOf((seconds < 10) ? /* invokedynamic(!) */ProcyonInvokeDynamicHelper_2.invoke(seconds) : Integer.valueOf(seconds));
    }
    
    static {
        TimeUtil.nanosecondsTimeSource = TimeUtil::getNanoTime;
    }
    
    // This helper class was generated by Procyon to approximate the behavior of an
    // 'invokedynamic' instruction that it doesn't know how to interpret.
    private static final class ProcyonInvokeDynamicHelper_2
    {
        private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
        private static MethodHandle handle;
        private static volatile int fence;
        
        private static MethodHandle handle() {
            final MethodHandle handle = ProcyonInvokeDynamicHelper_2.handle;
            if (handle != null)
                return handle;
            return ProcyonInvokeDynamicHelper_2.ensureHandle();
        }
        
        private static MethodHandle ensureHandle() {
            ProcyonInvokeDynamicHelper_2.fence = 0;
            MethodHandle handle = ProcyonInvokeDynamicHelper_2.handle;
            if (handle == null) {
                MethodHandles.Lookup lookup = ProcyonInvokeDynamicHelper_2.LOOKUP;
                try {
                    handle = ((CallSite)StringConcatFactory.makeConcatWithConstants(lookup, "makeConcatWithConstants", MethodType.methodType(String.class, int.class), "0\u0001")).dynamicInvoker();
                }
                catch (Throwable t) {
                    throw new UndeclaredThrowableException(t);
                }
                ProcyonInvokeDynamicHelper_2.fence = 1;
                ProcyonInvokeDynamicHelper_2.handle = handle;
                ProcyonInvokeDynamicHelper_2.fence = 0;
            }
            return handle;
        }
        
        private static String invoke(int p0) {
            try {
                return ProcyonInvokeDynamicHelper_2.handle().invokeExact(p0);
            }
            catch (Throwable t) {
                throw new UndeclaredThrowableException(t);
            }
        }
    }
}
