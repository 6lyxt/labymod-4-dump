// 
// Decompiled by Procyon v0.6.0
// 

package net.labymod.api.util.io.web.request;

import java.lang.invoke.CallSite;
import java.lang.reflect.UndeclaredThrowableException;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.StringConcatFactory;
import java.lang.invoke.MethodType;
import java.lang.invoke.MethodHandles;
import java.io.IOException;
import net.labymod.api.util.io.IOUtil;
import java.nio.file.Path;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
import java.io.InputStream;

public class FormData
{
    public static final String NEW_LINE = "\r\n";
    public static final String BOUNDARY;
    public static final byte[] BOUNDARY_BYTES;
    public static final byte[] BOUNDARY_END_BYTES;
    public static final byte[] NEW_LINE_BYTES;
    private final String name;
    private final InputStream value;
    private final String contentType;
    private final String fileName;
    private final long length;
    
    private FormData(final String name, final InputStream value, final String contentType, final String fileName, final long length) {
        this.name = name;
        this.value = value;
        this.contentType = contentType;
        this.fileName = fileName;
        this.length = length;
    }
    
    public static FormData of(final String key, final Object value) {
        return builder().name(key).value(value).build();
    }
    
    public static Builder builder() {
        return new Builder();
    }
    
    public String getName() {
        return this.name;
    }
    
    public InputStream getValue() {
        return this.value;
    }
    
    public String getContentType() {
        return this.contentType;
    }
    
    public String getFileName() {
        return this.fileName;
    }
    
    public long getLength() {
        return this.length;
    }
    
    public String getContentDispositionHeader() {
        return "Content-Disposition: form-data; name=\"" + this.name + "\"" + ((this.fileName != null) ? /* invokedynamic(!) */ProcyonInvokeDynamicHelper_1.invoke(this.fileName) : "");
    }
    
    public String getContentTypeHeader() {
        return "Content-Type: " + this.contentType;
    }
    
    static {
        BOUNDARY = "----WebKitFormBoundary" + UUID.randomUUID().toString().replace("-", "");
        BOUNDARY_BYTES = ("--" + FormData.BOUNDARY + "\r\n").getBytes(StandardCharsets.UTF_8);
        BOUNDARY_END_BYTES = ("--" + FormData.BOUNDARY + "--\r\n").getBytes(StandardCharsets.UTF_8);
        NEW_LINE_BYTES = "\r\n".getBytes(StandardCharsets.UTF_8);
    }
    
    public static class Builder
    {
        private String name;
        private InputStream value;
        private String contentType;
        private String fileName;
        private long length;
        
        public Builder name(final String name) {
            this.name = name;
            return this;
        }
        
        public Builder value(final String value) {
            final byte[] bytes = value.getBytes();
            return this.value(new ByteArrayInputStream(bytes), bytes.length);
        }
        
        public Builder value(final Object value) {
            return this.value(value.toString());
        }
        
        public Builder value(final Path path) throws IOException {
            return this.value(IOUtil.newInputStream(path), IOUtil.size(path));
        }
        
        public Builder value(final InputStream value, final long length) {
            this.value = value;
            this.length = length;
            return this;
        }
        
        public Builder value(final byte[] value) {
            this.value = new ByteArrayInputStream(value);
            this.length = value.length;
            return this;
        }
        
        public Builder contentType(final String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        public Builder fileName(final String fileName) {
            this.fileName = fileName;
            return this;
        }
        
        public FormData build() {
            return new FormData(this.name, this.value, this.contentType, this.fileName, this.length);
        }
    }
    
    // This helper class was generated by Procyon to approximate the behavior of an
    // 'invokedynamic' instruction that it doesn't know how to interpret.
    private static final class ProcyonInvokeDynamicHelper_1
    {
        private static final MethodHandles.Lookup LOOKUP = MethodHandles.lookup();
        private static MethodHandle handle;
        private static volatile int fence;
        
        private static MethodHandle handle() {
            final MethodHandle handle = ProcyonInvokeDynamicHelper_1.handle;
            if (handle != null)
                return handle;
            return ProcyonInvokeDynamicHelper_1.ensureHandle();
        }
        
        private static MethodHandle ensureHandle() {
            ProcyonInvokeDynamicHelper_1.fence = 0;
            MethodHandle handle = ProcyonInvokeDynamicHelper_1.handle;
            if (handle == null) {
                MethodHandles.Lookup lookup = ProcyonInvokeDynamicHelper_1.LOOKUP;
                try {
                    handle = ((CallSite)StringConcatFactory.makeConcatWithConstants(lookup, "makeConcatWithConstants", MethodType.methodType(String.class, String.class), "; filename=\"\u0001\"")).dynamicInvoker();
                }
                catch (Throwable t) {
                    throw new UndeclaredThrowableException(t);
                }
                ProcyonInvokeDynamicHelper_1.fence = 1;
                ProcyonInvokeDynamicHelper_1.handle = handle;
                ProcyonInvokeDynamicHelper_1.fence = 0;
            }
            return handle;
        }
        
        private static String invoke(String p0) {
            try {
                return ProcyonInvokeDynamicHelper_1.handle().invokeExact(p0);
            }
            catch (Throwable t) {
                throw new UndeclaredThrowableException(t);
            }
        }
    }
}
